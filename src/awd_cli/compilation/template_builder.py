"""Template building system for AGENTS.md compilation."""

import re
from dataclasses import dataclass
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from ..primitives.models import Instruction, Chatmode


@dataclass
class TemplateData:
    """Data structure for template generation."""
    instructions_content: str
    timestamp: str
    version: str
    

def build_conditional_sections(instructions: List[Instruction]) -> str:
    """Build sections grouped by applyTo patterns.
    
    Args:
        instructions (List[Instruction]): List of instruction primitives.
    
    Returns:
        str: Formatted conditional sections content.
    """
    if not instructions:
        return ""
    
    # Group instructions by pattern - use raw patterns
    pattern_groups = _group_instructions_by_pattern(instructions)
    
    sections = []
    
    for pattern, pattern_instructions in pattern_groups.items():
        sections.append(f"## Files matching `{pattern}`")
        sections.append("")
        
        # Combine content from all instructions for this pattern
        for instruction in pattern_instructions:
            content = instruction.content.strip()
            if content:
                sections.append(content)
                sections.append("")
    
    return "\n".join(sections)


def _group_instructions_by_pattern(instructions: List[Instruction]) -> Dict[str, List[Instruction]]:
    """Group instructions by applyTo patterns.
    
    Args:
        instructions (List[Instruction]): List of instructions to group.
    
    Returns:
        Dict[str, List[Instruction]]: Grouped instructions with raw patterns as keys.
    """
    pattern_groups: Dict[str, List[Instruction]] = {}
    
    for instruction in instructions:
        if not instruction.apply_to:
            continue
        
        pattern = instruction.apply_to
        
        if pattern not in pattern_groups:
            pattern_groups[pattern] = []
        
        pattern_groups[pattern].append(instruction)
    
    return pattern_groups


def generate_agents_md_template(template_data: TemplateData) -> str:
    """Generate the complete AGENTS.md file content.
    
    Args:
        template_data (TemplateData): Data for template generation.
    
    Returns:
        str: Complete AGENTS.md file content.
    """
    sections = []
    
    # Header
    sections.append("# AGENTS.md")
    sections.append(f"<!-- Generated by AWD CLI from .awd/ primitives -->")
    sections.append(f"<!-- Generated on: {template_data.timestamp} -->")
    sections.append(f"<!-- AWD Version: {template_data.version} -->")
    sections.append("")
    
    # Instructions content (grouped by patterns)
    if template_data.instructions_content:
        sections.append(template_data.instructions_content)
    
    # Footer
    sections.append("---")
    sections.append("*This file was generated by AWD CLI. Do not edit manually.*")
    sections.append("*To regenerate: `awd compile`*")
    sections.append("")
    
    return "\n".join(sections)