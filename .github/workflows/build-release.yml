name: CI/CD Pipeline

env:
  PYTHON_VERSION: '3.13'  # Standardize on 3.13 for compatibility

on:
  push:
    branches: [ main ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build (uploads as workflow artifacts instead of release assets)'
        required: false
        default: true
        type: boolean

jobs:
  # Always run tests first with matrix strategy
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - os: macos-13
            arch: x86_64  
            platform: darwin
          - os: macos-14
            arch: arm64
            platform: darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Cache uv environments
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.local/share/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]"
    
    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest tests/unit tests/test_console.py

    - name: Run smoke tests
      run: |
        source .venv/bin/activate
        pytest tests/integration/test_runtime_smoke.py -v

  # Build binaries (only on tags or manual dispatch)
  build:
    name: Build AWD Binary
    needs: [test]
    if: github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux
            arch: x86_64
            binary_name: awd-linux-x86_64
          - os: macos-13
            platform: darwin
            arch: x86_64
            binary_name: awd-darwin-x86_64
          - os: macos-14
            platform: darwin
            arch: arm64
            binary_name: awd-darwin-arm64
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write  # Required for release uploads
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install UPX (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl
      
      - name: Install UPX (macOS)
        if: matrix.platform == 'darwin'
        run: |
          brew install upx
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller
      
      - name: Build binary
        run: |
          chmod +x scripts/build-binary.sh
          ./scripts/build-binary.sh
      
      - name: Upload assets to release
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            ./dist/${{ matrix.binary_name }}
            ./dist/${{ matrix.binary_name }}.sha256
      
      - name: Upload binary as workflow artifact (test mode)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: |
            ./dist/${{ matrix.binary_name }}
            ./dist/${{ matrix.binary_name }}.sha256
          retention-days: 30
          if-no-files-found: error

  # End-to-end golden scenario tests (only on releases)
  e2e-tests:
    name: E2E Golden Scenario Tests
    needs: [test, build]
    if: github.ref_type == 'tag'  # Only run on version tags
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
            platform: linux
            binary_name: awd-linux-x86_64
          - os: macos-13
            arch: x86_64
            platform: darwin
            binary_name: awd-darwin-x86_64
          - os: macos-14
            arch: arm64
            platform: darwin
            binary_name: awd-darwin-arm64
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      models: read  # Required for GitHub Models API access
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install test dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: Download AWD binary from build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: ./dist/
      
      - name: Make binary executable
        run: chmod +x ./dist/${{ matrix.binary_name }}
      
      - name: Create AWD symlink for testing
        run: |
          ln -s "$(pwd)/dist/${{ matrix.binary_name }}" "$(pwd)/awd"
          echo "$(pwd)" >> $GITHUB_PATH
      
      - name: Run E2E golden scenario tests
        env:
          AWD_E2E_TESTS: "1"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_MODELS_KEY: ${{ secrets.GITHUB_TOKEN }}  # LLM library expects GITHUB_MODELS_KEY
        run: |
          source .venv/bin/activate
          pytest tests/integration/test_golden_scenario_e2e.py -v -s --tb=short
        timeout-minutes: 15

  # Publish to PyPI (only on tags and after successful builds)  
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build, e2e-tests]
    if: github.ref_type == 'tag' 
    environment:
      name: pypi
      url: https://pypi.org/p/awd-cli
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build Python package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
