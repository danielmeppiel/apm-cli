name: CI/CD Pipeline

env:
  PYTHON_VERSION: '3.13'  # Standardize on 3.13 for compatibility

on:
  push:
    branches: [ main ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build (uploads as workflow artifacts instead of release assets)'
        required: false
        default: true
        type: boolean

jobs:
  # Always run tests first with matrix strategy
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - os: macos-13
            arch: x86_64  
            platform: darwin
          - os: macos-14
            arch: arm64
            platform: darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Cache uv environments
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.local/share/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]"
    
    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest tests/unit tests/test_console.py

    - name: Run smoke tests
      run: |
        source .venv/bin/activate
        pytest tests/integration/test_runtime_smoke.py -v

  # Build binaries (only on tags or manual dispatch)
  build:
    name: Build AWD Binary
    needs: [test]
    if: github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux
            arch: x86_64
            binary_name: awd-linux-x86_64
          - os: macos-13
            platform: darwin
            arch: x86_64
            binary_name: awd-darwin-x86_64
          - os: macos-14
            platform: darwin
            arch: arm64
            binary_name: awd-darwin-arm64
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write  # Required for release uploads
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install UPX (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl
      
      - name: Install UPX (macOS)
        if: matrix.platform == 'darwin'
        run: |
          brew install upx
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller
      
      - name: Build binary
        run: |
          chmod +x scripts/build-binary.sh
          ./scripts/build-binary.sh
      
      - name: Upload binary as workflow artifact (for E2E tests)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: |
            ./dist/${{ matrix.binary_name }}/
            ./dist/${{ matrix.binary_name }}.sha256
          retention-days: 30
          if-no-files-found: error

  # End-to-end golden scenario tests (only on releases)
  e2e-tests:
    name: E2E Golden Scenario Tests
    needs: [test, build]
    if: github.ref_type == 'tag'  # Only run on version tags
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
            platform: linux
            binary_name: awd-linux-x86_64
          - os: macos-13
            arch: x86_64
            platform: darwin
            binary_name: awd-darwin-x86_64
          - os: macos-14
            arch: arm64
            platform: darwin
            binary_name: awd-darwin-arm64
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      models: read  # Required for GitHub Models API access
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install test dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: Download AWD binary from build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: ./dist/
      
      - name: Make binary executable
        run: chmod +x ./dist/${{ matrix.binary_name }}/awd
      
      - name: Create AWD symlink for testing
        run: |
          ln -s "$(pwd)/dist/${{ matrix.binary_name }}/awd" "$(pwd)/awd"
          echo "$(pwd)" >> $GITHUB_PATH
      
      - name: Run E2E golden scenario tests
        env:
          AWD_E2E_TESTS: "1"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_MODELS_KEY: ${{ secrets.GITHUB_TOKEN }}  # LLM library expects GITHUB_MODELS_KEY
        run: |
          source .venv/bin/activate
          chmod +x scripts/test-e2e.sh
          ./scripts/test-e2e.sh
        timeout-minutes: 20

  # Create GitHub release (only after E2E tests pass)
  create-release:
    name: Create GitHub Release
    needs: [test, build, e2e-tests]
    if: github.ref_type == 'tag' && success() # Only run on tags AND if all previous jobs succeeded
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for release creation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist/
          merge-multiple: true
      
      - name: Prepare release binaries
        run: |
          # Create tar.gz archives from directory structure for release and Homebrew
          cd dist
          for binary in awd-linux-x86_64 awd-darwin-x86_64 awd-darwin-arm64; do
            # Ensure the binary is executable before archiving
            chmod +x "${binary}/awd"
            # Create tar.gz with preserved permissions
            tar -czf "${binary}.tar.gz" "$binary"
            if command -v sha256sum &> /dev/null; then
              sha256sum "${binary}.tar.gz" > "${binary}.tar.gz.sha256"
            elif command -v shasum &> /dev/null; then
              shasum -a 256 "${binary}.tar.gz" > "${binary}.tar.gz.sha256"
            fi
          done
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            ./dist/awd-linux-x86_64.tar.gz
            ./dist/awd-linux-x86_64.tar.gz.sha256
            ./dist/awd-darwin-x86_64.tar.gz
            ./dist/awd-darwin-x86_64.tar.gz.sha256
            ./dist/awd-darwin-arm64.tar.gz
            ./dist/awd-darwin-arm64.tar.gz.sha256

  # Test installation script on each platform
  test-installation:
    name: Test Installation Script
    needs: [create-release]
    if: github.ref_type == 'tag'
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux
          - os: macos-13
            platform: darwin
          - os: macos-14
            platform: darwin
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test installation script
        run: |
          # Run the installation script
          bash install.sh
          
          # Verify installation worked
          if ! command -v awd >/dev/null 2>&1; then
            echo "❌ Installation failed - awd command not found"
            exit 1
          fi
          
          # Test basic functionality
          awd --version
          echo "✅ Installation test passed on ${{ matrix.platform }}"
      
      - name: Cleanup
        if: always()
        run: |
          # Remove installed binary
          sudo rm -f /usr/local/bin/awd || true

  # Publish to PyPI (only on tags and after successful builds)  
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build, e2e-tests, create-release, test-installation]
    if: github.ref_type == 'tag' && success() # Only run on tags AND if all previous jobs succeeded 
    environment:
      name: pypi
      url: https://pypi.org/p/awd-cli
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build Python package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  # Update Homebrew formula (only on tags and after successful PyPI publish)
  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [test, build, e2e-tests, create-release, publish-pypi, test-installation]
    if: github.ref_type == 'tag' && success() # Only run on tags AND if all previous jobs succeeded
    
    steps:
      - name: Extract SHA256 checksums from GitHub release
        id: checksums
        run: |
          # Download the SHA256 checksum files from the GitHub release
          RELEASE_TAG="${{ github.ref_name }}"
          
          echo "Downloading checksums for release $RELEASE_TAG"
          
          # Download checksum files directly from the release
          curl -L -o awd-darwin-arm64.tar.gz.sha256 \
            "https://github.com/${{ github.repository }}/releases/download/$RELEASE_TAG/awd-darwin-arm64.tar.gz.sha256"
          curl -L -o awd-darwin-x86_64.tar.gz.sha256 \
            "https://github.com/${{ github.repository }}/releases/download/$RELEASE_TAG/awd-darwin-x86_64.tar.gz.sha256"
          curl -L -o awd-linux-x86_64.tar.gz.sha256 \
            "https://github.com/${{ github.repository }}/releases/download/$RELEASE_TAG/awd-linux-x86_64.tar.gz.sha256"
          
          # Extract SHA256 checksums
          DARWIN_ARM64_SHA=$(cat awd-darwin-arm64.tar.gz.sha256 | cut -d' ' -f1)
          DARWIN_X86_64_SHA=$(cat awd-darwin-x86_64.tar.gz.sha256 | cut -d' ' -f1)
          LINUX_X86_64_SHA=$(cat awd-linux-x86_64.tar.gz.sha256 | cut -d' ' -f1)
          
          echo "darwin-arm64-sha=$DARWIN_ARM64_SHA" >> $GITHUB_OUTPUT
          echo "darwin-x86_64-sha=$DARWIN_X86_64_SHA" >> $GITHUB_OUTPUT
          echo "linux-x86_64-sha=$LINUX_X86_64_SHA" >> $GITHUB_OUTPUT
          
          echo "Darwin ARM64 SHA: $DARWIN_ARM64_SHA"
          echo "Darwin x86_64 SHA: $DARWIN_X86_64_SHA"
          echo "Linux x86_64 SHA: $LINUX_X86_64_SHA"
      
      - name: Trigger Homebrew tap repository update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: danielmeppiel/homebrew-awd-cli
          event-type: formula-update
          client-payload: |
            {
              "release": {
                "version": "${{ github.ref_name }}",
                "tag": "${{ github.ref_name }}",
                "repository": "${{ github.repository }}"
              },
              "checksums": {
                "darwin_arm64": "${{ steps.checksums.outputs.darwin-arm64-sha }}",
                "darwin_x86_64": "${{ steps.checksums.outputs.darwin-x86_64-sha }}",
                "linux_x86_64": "${{ steps.checksums.outputs.linux-x86_64-sha }}"
              }
            }
