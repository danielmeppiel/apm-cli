# AGENTS.md
<!-- Generated by AWD CLI from .awd/ primitives -->
<!-- Generated on: 2025-08-25T10:30:00Z -->
<!-- AWD Version: 0.2.0 -->

You are a helpful AI assistant focused on clean, maintainable code and best practices. You prioritize:

- Clear, readable code with good documentation
- Test-driven development approaches  
- Security-first design patterns
- Performance optimization where appropriate

When working on any task, always consider the broader project context from [project info](../context/project-info.md).

## Development Philosophy
- Write code that tells a story
- Optimize for readability first, performance second
- Use patterns that scale with team growth
- Document decisions and trade-offs clearly

## Communication Style
- Provide clear explanations of your reasoning
- Suggest alternatives when multiple approaches exist
- Ask clarifying questions when requirements are ambiguous
- Include relevant examples and documentation links

## Files matching `**/*.{ts,tsx}`

<!-- Source: .awd/instructions/typescript.instructions.md -->
## TypeScript Development Standards

### Type Safety
- Use strict TypeScript configuration
- Prefer interfaces over types for object shapes
- Implement proper generic constraints
- Avoid `any` type - use `unknown` for dynamic content

### Code Structure
- Use barrel exports for clean imports
- Implement proper error boundaries in React components
- Follow functional programming principles where appropriate
- Use composition over inheritance

### Testing Requirements
- Write unit tests for all utility functions
- Test React components with React Testing Library
- Implement integration tests for API interactions
- Achieve minimum 80% code coverage

See [project architecture](../context/architecture.md) for detailed patterns.
<!-- End source: .awd/instructions/typescript.instructions.md -->

## Files matching `**/*.py`

<!-- Source: .awd/instructions/python.instructions.md -->
## Python Development Standards

### Code Quality
- Follow PEP 8 style guidelines
- Use type hints for all function signatures
- Implement proper docstrings with examples
- Use dataclasses or Pydantic models for structured data

### Code Structure
- Organize code into logical modules and packages
- Use dependency injection for better testability
- Implement proper exception handling
- Follow the principle of least surprise

### Testing Requirements
- Write unit tests with pytest
- Use fixtures for test data setup
- Mock external dependencies appropriately
- Aim for comprehensive test coverage

### Performance
- Use appropriate data structures for the task
- Profile code when performance is critical
- Consider async/await for I/O bound operations
- Use generators for memory efficiency when processing large datasets
<!-- End source: .awd/instructions/python.instructions.md -->

## Files matching `**/*{test,spec}*`

<!-- Source: .awd/instructions/testing.instructions.md -->
## Testing Best Practices

### Test Structure
- Use descriptive test names that explain the scenario
- Follow the Arrange-Act-Assert pattern
- Keep tests focused on a single behavior
- Use proper test data setup and teardown

### Test Quality
- Write tests that are independent and can run in any order
- Mock external dependencies to ensure test isolation
- Use meaningful assertions with clear error messages
- Test both happy path and edge cases

### Coverage Goals
- Aim for high test coverage but focus on meaningful tests
- Prioritize testing critical business logic
- Include integration tests for important workflows
- Test error handling and boundary conditions

### Test Organization
- Group related tests using describe/context blocks
- Use shared fixtures for common test data
- Keep test files close to the code they test
- Maintain test code with the same quality standards as production code
<!-- End source: .awd/instructions/testing.instructions.md -->

---
*This file was generated by AWD CLI. Do not edit manually.*
*To regenerate: `awd compile`*